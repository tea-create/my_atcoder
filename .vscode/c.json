{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"template":{
		"prefix": "template",
		"body": [
			"#include <stdio.h>",
			"#include <math.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"",
			"using namespace std;",
			"///////////////////////////////",
			"#define DEBUG",
			"///////////////////////////////",
			"",
			"#pragma region Macros // macros",
			"#define NULL ((void *)0)",
			"#define null NULL",
			"#define PI 3.14159265359",
			"#define MOD 1000000007",
			"#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
			"#define lep(i, n) for (long i = 0; i < (long)(n); i++)",
			"#define llep(i, n) for (long long i = 0; i < (long long)(n); i++)",
			"#define rep2(i, m, n) for (int i = m-1; i < (int)(n); i++)",
			"#define lep2(i, m, n) for (long i = m-1; i < (long)(n); i++)",
			"#define llep2(i, m, n) for (long long i = m-1; i < (long long)(n); i++)",
			"#define repinf(i) for(int i = 0;;i++)",
			"#define lepinf(i) for(long i = 0;;i++)",
			"#define llepinf(i) for(long long i = 0;;i++)",
			"#define _GLIBCXX_DEBUG",
			"",
			"#define SWAP(type, a, b) { const type tmp = a; a = b; b = tmp; }"
			"#define arr_cpy(from, to) memcpy(to, from, sizeof(from))",
			"#define elif",
			"#ifdef DEBUG",
			"#define PRINTI(x) printf(#x \" = %d\\n\", (x))",
			"#define PRINTLL(x) printf(#x \" = %lld\\n\", (x))",
			"#define RAW_PRINT(x) printf(#x \"\\n\")",
			"#else ",
			"#define PRINTI(x)",
			"#define PRINTLL(x)",
			"#endif",
			"#pragma endregion",
			"",
			"#pragma region stdints // ctype",
			"#include <stdint.h>",
			"#define char char",
			"#define uchar unsigned char",
			"#define _short short",
			"#define short int16_t",
			"#define ushort uint16_t",
			"#define long int",
			"#define _long int",
			"#define _int int",
			"#define int int32_t",
			"#define uint int32_t",
			"#define ll int64_t",
			"#define ull uint64_t",
			"#pragma endregion",
			"",
			"#pragma region readers // readers",
			"",
			"long long lleads(){",
				"\tlong long x = 0; char c;",
				"\twhile(((c=getchar())>'9' || c<'0')&&c!='-');",
				"\tconst long long f=(c=='-')&&(c=getchar());",
				"\twhile(x=x*10-48+c,(c=getchar())>='0'&&c<='9');",
				"\treturn f?-x:x;",
			"}",
			"",
			"int reads(){",
				"\tint x = 0; char c;",
				"\twhile(((c=getchar())>'9' || c<'0')&&c!='-');",
				"\tconst int f=(c=='-')&&(c=getchar());",
				"\twhile(x=x*10-48+c,(c=getchar())>='0'&&c<='9');",
				"\treturn f?-x:x;",
			"}",
			"",
			"int leads(){",
				"\tlong x = 0; char c;",
				"\twhile(((c=getchar())>'9' || c<'0')&&c!='-');",
				"\tconst long f=(c=='-')&&(c=getchar());",
				"\twhile(x=x*10-48+c,(c=getchar())>='0'&&c<='9');",
				"\treturn f?-x:x;",
			"}",
			"",
			"int seads(){",
				"\tshort int x = 0; char c;",
				"\twhile(((c=getchar())>'9' || c<'0')&&c!='-');",
				"\tconst short int f=(c=='-')&&(c=getchar());",
				"\twhile(x=x*10-48+c,(c=getchar())>='0'&&c<='9');",
				"\treturn f?-x:x;",
			"}",
			"",
			"#pragma endregion",
			"",
			"long long pow(int a,int b){",
				"\tint x=a, y=b;long long ret=1;",
				"\tif(a==0)return 0;",
				"\tloop:{",
					"\t\tif(b==0) return ret;",
					"\t\tret*=(long long)a;b-=1;",
				"\t}",
				"\tgoto loop;",
			"}",
			"",
			"long long keta(long long tar){",
				"\tlong long a = tar, b = 1;",
				"\tloop: {",
					"\t\tif(a == 0){return 1;}",
					"\t\tif(tar / 10 != 0) {a=a/10;b++;goto loop;}",
					"\t\treturn b;",
				"\t}",
			"}",
			"",
			"long long kaijo(long long tar){",
				"\tlong long sum = 0;",
				"\tlong long i = tar;",
				"\tloop:{",
					"\t\tif(i == 0)return sum;",
					"\t\tsum += i;",
					"\t\ti-=1;",
					"\t\tgoto loop;",
				"\t}",
			"}",
			"",
			"int main(void){",
				"\t ll a = llead(), b = llead();",
			"}",
			""
		],
		"description": "テンプレート"
	},


	"macros":{
		"prefix": "macros",
		"body": [
			"#pragma region Macros",
			"#define NULL ((void *)0)",
			"#define null NULL",
			"#define PI 3.14159265359",
			"#define MOD 1000000007",
			"#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
			"#define lep(i, n) for (long i = 0; i < (long)(n); i++)",
			"#define llep(i, n) for (long long i = 0; i < (long long)(n); i++)",
			"#define rep2(i, m, n) for (int i = m-1; i < (int)(n); i++)",
			"#define lep2(i, m, n) for (long i = m-1; i < (long)(n); i++)",
			"#define llep2(i, m, n) for (long long i = m-1; i < (long long)(n); i++)",
			"#define repinf(i) for(int i = 0;;i++)",
			"#define lepinf(i) for(long i = 0;;i++)",
			"#define llepinf(i) for(long long i = 0;;i++)",
			"#define _GLIBCXX_DEBUG",
			"",
			"#define SWAP(type, a, b) { const type tmp = a; a = b; b = tmp; }",
			"#define arr_cpy(from, to) memcpy(to, from, sizeof(from))",
			"#define elif",
			"#ifdef DEBUG",
			"#define PRINTI(x) printf(#x \" = %d\\n\", (x))",
			"#define PRINTLL(x) printf(#x \" = %lld\\n\", (x))",
			"#define RAW_PRINT(x) printf(#x \"\\n\")",
			"#else ",
			"#define PRINTI(x)",
			"#define PRINTLL(x)",
			"#endif",
			"#pragma endregion"
		],
		"description": "macros"
	},
	"ctype":{
		"prefix": "ctype",
		"body": [
			"#pragma region stdints",
			"#include <stdint.h>",
			"#define char char",
			"#define uchar unsigned char",
			"#define _short short",
			"#define short int16_t",
			"#define ushort uint16_t",
			"#define long int",
			"#define _long int",
			"#define _int int",
			"#define int int32_t",
			"#define uint int32_t",
			"#define ll int64_t",
			"#define ull uint64_t",
			"#pragma endregion"
		],
		"description": "stdintその他"
	},
	"read": {
		"prefix" : "reading",
		"body": [
			"${f_type} ${f_name}(){",
				"\t${f_type} x = 0; char c;",
				"\twhile(((c=getchar())>'9' || c<'0')&&c!='-');",
				"\tconst ${f_type} f=(c=='-')&&(c=getchar());",
				"\twhile(x=x*10-48+c,(c=getchar())>='0'&&c<='9');",
				"\treturn f?-x:x;",
			"}"
		],
		"description": "整数値1つだけ読み込み"
	},
	"readers": {
		"prefix" : "readers",
		"body": [
			"#pragma region readers",
			"long long lleads(){",
				"\tlong long x = 0; char c;",
				"\twhile(((c=getchar())>'9' || c<'0')&&c!='-');",
				"\tconst long long f=(c=='-')&&(c=getchar());",
				"\twhile(x=x*10-48+c,(c=getchar())>='0'&&c<='9');",
				"\treturn f?-x:x;",
			"}",
			"",
			"int reads(){",
				"\tint x = 0; char c;",
				"\twhile(((c=getchar())>'9' || c<'0')&&c!='-');",
				"\tconst int f=(c=='-')&&(c=getchar());",
				"\twhile(x=x*10-48+c,(c=getchar())>='0'&&c<='9');",
				"\treturn f?-x:x;",
			"}",
			"",
			"int leads(){",
				"\tlong x = 0; char c;",
				"\twhile(((c=getchar())>'9' || c<'0')&&c!='-');",
				"\tconst long f=(c=='-')&&(c=getchar());",
				"\twhile(x=x*10-48+c,(c=getchar())>='0'&&c<='9');",
				"\treturn f?-x:x;",
			"}",
			"",
			"int seads(){",
				"\tshort int x = 0; char c;",
				"\twhile(((c=getchar())>'9' || c<'0')&&c!='-');",
				"\tconst short int f=(c=='-')&&(c=getchar());",
				"\twhile(x=x*10-48+c,(c=getchar())>='0'&&c<='9');",
				"\treturn f?-x:x;",
			"}",
			"",
			"#pragma endregion"

		],
		"description": "整数値1つだけ読み込みセット"
	},
	"min-max":{
		"prefix": "min-max",
		"body": [
			"#pragma region min-max",
			"${f_type} min_(${f_type} a, ${f_type} b){",
			"\treturn a > b ? b : a;",
			"}",
			"${f_type} max_(${f_type} a, ${f_type} b){",
			"\treturn a > b ? a : b;",
			"}",
			"#pragma endregion"
		],
		"description": "小さいほう、大きいほうを出力する"
	},
	"bool":{
		"prefix": "bool",
		"body": [
			"#pragma region Booleans",
			"typedef struct {",
			"\tuint8_t flag : 1;",
			"} Boolean;",
			"typedef enum bool { FALSE, TRUE } bool;",
			"#define TRUE (1)",
			"#define true (1)",
			"#define FALSE (0)",
			"#define false (0)",
			"#define isTrue(x) ((x) == 1)",
			"#define isFalse(x) ((x) != 1)",
			"#define tBool(x) (!(x))",
			"#pragma endregion"
		]
	},
	"pow":{
		"prefix": "pow",
		"body": [
			"${f_type} pow(${input_type} a,${input_type} b){",
				"\t${input_type} x=a, y=b;${f_type} ret=1;",
				"\tif(a==0)return 0;",
				"\tloop:{",
					"\t\tif(b==0) return ret;",
					"\t\tret*=(${f_type})a;b-=1;",
				"\t}",
				"\tgoto loop;",
			"}"
		],
		"description": "べき乗計算"
	},
	"keta":{
		"prefix": "keta",
		"body": [
			"${f_type} keta(${f_type} tar){",
				"\t${f_type} a = tar, b = 1;",
				"\tloop: {",
					"\t\tif(a == 0){return 1;}",
					"\t\tif(tar / 10 != 0) {a=a/10;b++;goto loop;}",
					"\t\treturn b;",
				"\t}",
			"}"
		],
		"description": "桁計算"
	},
	"kaijo":{
		"prefix": "kaijo",
		"body": [
			"${f_type} kaijo(${f_type} tar){",
				"\t${f_type} sum = 0;",
				"\t${f_type} i = tar;",
				"\tloop:{",
					"\t\tif(i == 0)return sum;",
					"\t\tsum += i;",
					"\t\ti-=1;",
					"\t\tgoto loop;",
				"\t}",
			"}"
		],
		"description": "階乗計算"
	},
	"abs":{
		"prefix": "abs",
		"body": [
			"${f_type} abs(${f_type} tar){return (tar<0 ? -tar : tar)}"
		],
		"description": "絶対値"
	}
}